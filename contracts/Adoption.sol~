pragma solidity ^0.5.0;

contract Adoption {
    event Adopt (
        address indexed _from,
        uint indexed _id,
        address indexed logged_addr
    );
    address[16] public adopters;  // 保存领养者的地址
    uint[16] public counters = [9,5,2,4,4,2,5,9,9,5,2,4,4,2,5,9]; // number of books

    // 领养宠物
    function adopt(uint petId) public returns (uint) {
        require(petId >= 0 && petId <= 15);  // 确保id在数组长度内
        require(counters[petId] > 0); // ensure more than 1 book is left
        adopters[petId] = msg.sender;        // 保存调用这地址 
        counters[petId] = counters[petId]-1;  // update counters
        return petId;
    }

    // return borrowed books
    function giveback(uint petId) public returns (uint) {
        
        //emit Adopt(msg.sender, petId, adopters[petId]);

        require(petId >= 0 && petId <= 15);  // ensure id does NOT exceed boundary
        require(adopters[petId] == msg.sender); // only the user who borrowed this book and return it
        
        // clear record 
        adopters[petId] = address(0x0000000000000000000000000000000000000000); 
        counters[petId] = counters[petId] + 1;  // update counters
        return petId;
    }

    // 返回领养者
    function getAdopters() public view returns (address[16] memory) {
        return adopters;
    }

    // get counters
    function getCounters() public view returns (uint[16] memory) {
        return counters;
    }
}